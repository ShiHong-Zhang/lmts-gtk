#!/usr/bin/env lua
-- 实际需要被加载的时候，需要删除第1、2行。
-- -----------------------------------------------------
--  This is a config file for LMTS, using lua script
--
--  Author by Zhang Shihong (zhangsh@lemote.com)
-- -----------------------------------------------------

-- -----------------------------------------------------
-- DEFINES
--
-- Global variable option contains many config macro
con = {}

-- resrc contains the resource for test
resrc = {}

-- tool contains the user-defined tools 
tools = {}

-- and some functions

-- logs	contains the log about file names defined
logs = {}

-- -----------------------------------------------------


-- -----------------------------------------------------
-- -----------------------------------------------------
--
-- configures base
--
con = {

	-- ---------------------------------------------------
	-- version
	VERSION = "4.0.0",


	-- ---------------------------------------------------
	-- machine type
	MACH_TYPE = "notebook",


	-- ---------------------------------------------------
	-- test program's path
	HOME_PATH = "/root/lmts/",
	LOGS_PATH = "/root/logs/",
	TMP_PATH = "/root/tmp/",


	-- ---------------------------------------------------
	-- battery fanstem cpu mem directory
	BAT_PATH = "/sys/class/power_supply/ls3anb-bat/",
	FANS_PATH = "/sys/class/hwmon/hwmon0/",
	CPU_PATH = "/sys/devices/system/cpu/",


	-- ---------------------------------------------------
	-- network server ip
--	NTP_SER_IP = "192.168.1.11",		-- debug
--	FTP_SER_IP = "192.168.1.11",		-- debug
	NTP_SER_IP = "192.168.1.11",
	FTP_SER_IP = "192.168.1.11",
	SQL_SER_IP = "192.168.1.11",
	WIFI_SER_GW = "192.168.1.1",


	-- ---------------------------------------------------
	-- USB test
	-- 3ANB
	USB_SPEC = 3,
	USB_HAD = 2,


	-- ---------------------------------------------------
	-- wireless essid
	WIFI_ESSID = "lemote-cx",


	-- ---------------------------------------------------
	-- audio
	-- analysis way
	DEFAULT_FREQ		= 1000,
	AUDIO_FREQ_PER_ERR	= 0.02, -- 2%
	AUDIO_FREQ_ERR		= 1,
	AUDIO_AMPLITUDE		= 0.25,
	AUDIO_EQUILIBRIUM	= 5,

	-- is it has speaker?    0 is false, 1 is true;
	IS_HAD_SPEAKER		= 1,
	IS_AUDIO_AUTO_TEST	= 0,
	IS_AUDIO_BRIEF_TEST = 0, -- Just for 'Rural informatization' only


	-- ---------------------------------------------------
	-- The process name of credit card machines on 'Rural informatization'
	RI_PROCESS_NAME = "ucb1x00",


	-- ---------------------------------------------------
	-- burnin (minute)
	BURNIN_RUN_TIME = 240,


	-- ---------------------------------------------------
	-- serial number's length
	ECVER_LEN		= 6,
	PMONVER_LEN		= 5,
	MACLEN			= 12,
	MBSNLEN			= 17,
	PSNLEN			= 3,


	-- ---------------------------------------------------
	-- CPU range
	-- cpu processor count
	CPU_CORE_NUM = 4,

	-- 3A freq
	CPU_FRQ_UP = 925000,
	CPU_FRQ_BO = 875000,

	-- ---------------------------------------------------
	-- MEM range
	MEM_UP = 2048,
	MEM_BO = 1024,


	-- ---------------------------------------------------
	-- eeprom content
	ROM_8168 = "0x8129, 0x10ec, 0x8168, 0x10ec, 0x8168, 0x0104",

}


-- -----------------------------------------------------
-- -----------------------------------------------------
--
-- resource base
--
resrc = {
	-- ---------------------------------------------------
	-- wav musics
	left_music		= con.HOME_PATH .. "resrc/wav/left.wav",
	right_music		= con.HOME_PATH .. "resrc/wav/right.wav",
	beep_music		= con.HOME_PATH .. "resrc/wav/1000HZ_48K_Stereo_3S.wav",
	normal_music	= con.HOME_PATH .. "resrc/wav/normal.wav",
	record_music	= con.TMP_PATH .. "record.wav",


	-- ---------------------------------------------------
	-- about battery
	bat_connect_status	= con.BAT_PATH .. "present",
	bat_voltage_max		= con.BAT_PATH .. "voltage_max_design",
	bat_voltage_now		= con.BAT_PATH .. "voltage_now",
	bat_capacity		= con.BAT_PATH .. "capacity",
	bat_status			= con.BAT_PATH .. "status",


	-- ---------------------------------------------------
	-- about cpu
	cpu_core_count		= con.CPU_PATH .. "kernel_max",
	cpu_max_freq		= con.CPU_PATH .. "cpu0/cpufreq/cpuinfo_max_freq",


	-- ---------------------------------------------------
	-- about touchpad
	tp_scroll_file		= "/sys/devices/platform/i8042/serio2/flags",


	-- ---------------------------------------------------
	-- about fanstem
	fans_level_file		= con.FANS_PATH .. "pwm1",
	fans_speed_file		= con.FANS_PATH .. "fan1_input",
}


-- -----------------------------------------------------
-- -----------------------------------------------------
--
-- tools base
--
tools = {
	-- ---------------------------------------------------
	-- audio automatic test
	audio_analysis = con.HOME_PATH .. "resrc/tools/audio/analysis",


	-- ---------------------------------------------------
	-- eeprom tools
	read_mac	= con.HOME_PATH .. "resrc/tools/eeprom/read_mac",
	write_mac	= con.HOME_PATH .. "resrc/tools/eeprom/write_mac",
	read_rom	= con.HOME_PATH .. "resrc/tools/eeprom/read_rom",
	write_rom	= con.HOME_PATH .. "resrc/tools/eeprom/write_rom",


	-- ---------------------------------------------------
	-- read ec
	rdec = con.HOME_PATH .. "resrc/tools/ectools/rdec",


	-- ---------------------------------------------------
	-- ethtool
	ethtool = con.HOME_PATH .. "resrc/tools/ethtool/ethtool",


	-- ---------------------------------------------------
	-- network
	wput		= con.HOME_PATH .. "resrc/tools/net/wput",
	wget		= con.HOME_PATH .. "resrc/tools/net/wget",
	ntpdate		= con.HOME_PATH .. "resrc/tools/net/ntpdate",
}


-- -----------------------------------------------------
-- -----------------------------------------------------
--
-- functions base
--
con.getMacid = function()
	local fd = assert(io.popen( tools.read_mac))
		local content = fd:read("*all")
		fd:close()

		if not content or content == "" then
			print( "getMacid error!")
			return ""
		end
	return content:sub( 1, -2)
end

con.getEthDev = function()
	local fd = assert(io.open("/proc/net/dev", "r"))
	local content = fd:read("*all")
	fd:close()

	local edev = string.match(content, "eth%d+[_%w]*")
	if not edev then
		return nil
	end

	return edev
end

con.getWlanDev = function()
	local fd = assert(io.open("/proc/net/dev", "r"))
	local content = fd:read("*all")
	fd:close()

	local wdev = string.match(content, "wlan%d+[_%w]*")
	if not wdev then
		return nil
	end

	return wdev
end


-- -----------------------------------------------------
-- -----------------------------------------------------
--
-- return values of functions
--
con.ETH_DEV = con.getEthDev()
con.WLAN_DEV = con.getWlanDev()


-- -----------------------------------------------------
-- -----------------------------------------------------
--
-- logs base
--
logs = {
	-- ---------------------------------------------------
	-- the name of log files
	logfile		= con.LOGS_PATH .. "log.txt",
	errfile		= con.LOGS_PATH .. "err.txt",
	err_details	= con.LOGS_PATH .. "err_details.txt",
	mbsnfile	= con.LOGS_PATH .. "MBSN.txt",
	psnfile		= con.LOGS_PATH .. "PSN.txt",
	ntplog		= con.LOGS_PATH .. "ntp.txt",


	-- ---------------------------------------------------
	-- log file of each station
--	smt = con.LOGS_PATH .. "",
	fat = con.LOGS_PATH .. "req" .. string.gsub( con.getMacid(), ":", "") .. ".fat",
	frt = con.LOGS_PATH .. "req" .. string.gsub( con.getMacid(), ":", "") .. ".frt",
	fft = con.LOGS_PATH .. "req" .. string.gsub( con.getMacid(), ":", "") .. ".fft",


	-- ---------------------------------------------------
	-- record ntpdate query output info
	ntpq_log = con.LOGS_PATH .. "ntpq_log.txt",
}
